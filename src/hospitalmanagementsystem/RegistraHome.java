/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hospitalmanagementsystem;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Calendar;

/**
 *
 * @Reena
 */
public class RegistraHome extends javax.swing.JFrame {

    /**
     * Creates new form RegistraHome
     */
    int UID;

    public RegistraHome(String uid) {
        this.UID = Integer.parseInt(uid);
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Name = new javax.swing.JLabel();
        registraID = new javax.swing.JLabel();
        logOut = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        TabPane = new javax.swing.JTabbedPane();
        viewBookingPane = new javax.swing.JPanel();
        bookingTable = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ViewButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DateChooser2 = new com.toedter.calendar.JDateChooser();
        patientId = new javax.swing.JComboBox<>();
        doctor1 = new javax.swing.JComboBox<>();
        scheduleBookingPane = new javax.swing.JPanel();
        specialisationComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        DateChooser1 = new com.toedter.calendar.JDateChooser();
        addDoctorPane = new javax.swing.JPanel();
        RegistaLastNameLabel1 = new javax.swing.JLabel();
        RegistraPhNumberlabel1 = new javax.swing.JLabel();
        doctorLastNameField = new javax.swing.JTextField();
        doctorPhNumberField = new javax.swing.JTextField();
        doctorEmailField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        addDoctor = new javax.swing.JButton();
        doctorFirstNameLabel = new javax.swing.JLabel();
        doctorFirstNameField = new javax.swing.JTextField();
        doctorSpecialization = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        doctorPasswordField = new javax.swing.JTextField();
        addRegistraPane = new javax.swing.JPanel();
        RegistaLastNameLabel = new javax.swing.JLabel();
        RegistraPhNumberlabel = new javax.swing.JLabel();
        registraLastNameField = new javax.swing.JTextField();
        registraPhNumberField = new javax.swing.JTextField();
        registraPasswordField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        addRegistra = new javax.swing.JButton();
        RegistraFirstName = new javax.swing.JLabel();
        registraFirstNameField = new javax.swing.JTextField();
        addDoctorAvailability = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        searchDoctor = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        Hour2 = new javax.swing.JSpinner();
        Minute2 = new javax.swing.JSpinner();
        Hour1 = new javax.swing.JSpinner();
        Details1 = new javax.swing.JLabel();
        Minute1 = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        Details = new javax.swing.JLabel();
        patientAttend = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        addAvailability = new javax.swing.JButton();
        doctor2 = new javax.swing.JComboBox<>();
        patientHistory = new javax.swing.JPanel();
        patient2 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        viewHistory = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        printHistory = new javax.swing.JButton();
        Report = new javax.swing.JPanel();
        userType = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setBounds(new java.awt.Rectangle(500, 250, 0, 0));
        setLocation(new java.awt.Point(450, 250));
        setName("RegistraHome"); // NOI18N

        Name.setText("jLabel1");

        registraID.setText("jLabel2");

        logOut.setText("Log Out");
        logOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(registraID)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logOut)
                        .addGap(79, 79, 79))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Name)
                    .addComponent(logOut))
                .addGap(18, 18, 18)
                .addComponent(registraID)
                .addGap(17, 17, 17))
        );

        TabPane.setName("addDoctorPane"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment Date", "Time", "Patient Name", "Doctor Name", "Specialisation"
            }
        ));
        bookingTable.setViewportView(jTable1);

        ViewButton.setText("View");
        ViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Patient ID");

        jLabel5.setText("Doctor ID");

        jLabel6.setText("Date");

        javax.swing.GroupLayout viewBookingPaneLayout = new javax.swing.GroupLayout(viewBookingPane);
        viewBookingPane.setLayout(viewBookingPaneLayout);
        viewBookingPaneLayout.setHorizontalGroup(
            viewBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewBookingPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookingTable, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(viewBookingPaneLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(patientId, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(doctor1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ViewButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        viewBookingPaneLayout.setVerticalGroup(
            viewBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewBookingPaneLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(viewBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ViewButton)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)
                        .addComponent(patientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(doctor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(DateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(bookingTable, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        TabPane.addTab("View Booking", viewBookingPane);

        specialisationComboBox.setName(""); // NOI18N

        jLabel1.setText("Specialist");

        jLabel2.setText("Date");

        searchButton.setLabel("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Available Date", "Available From", "Available To", "Book"
            }
        ));
        jTable2.setEditingRow(0);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        javax.swing.GroupLayout scheduleBookingPaneLayout = new javax.swing.GroupLayout(scheduleBookingPane);
        scheduleBookingPane.setLayout(scheduleBookingPaneLayout);
        scheduleBookingPaneLayout.setHorizontalGroup(
            scheduleBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleBookingPaneLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(scheduleBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(scheduleBookingPaneLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(specialisationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(26, 26, 26)
                        .addComponent(DateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(searchButton)))
                .addGap(53, 53, 53))
        );
        scheduleBookingPaneLayout.setVerticalGroup(
            scheduleBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleBookingPaneLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(scheduleBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scheduleBookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(specialisationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(searchButton)
                    .addComponent(DateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        TabPane.addTab("Schedule Booking", scheduleBookingPane);

        RegistaLastNameLabel1.setText("Last Name");

        RegistraPhNumberlabel1.setText("Phone Number");

        jLabel12.setText("Email");

        addDoctor.setText("Add");
        addDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorActionPerformed(evt);
            }
        });

        doctorFirstNameLabel.setText("First Name");

        jLabel13.setText("Specialisation");

        jLabel14.setText("Password");

        javax.swing.GroupLayout addDoctorPaneLayout = new javax.swing.GroupLayout(addDoctorPane);
        addDoctorPane.setLayout(addDoctorPaneLayout);
        addDoctorPaneLayout.setHorizontalGroup(
            addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDoctorPaneLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addDoctorPaneLayout.createSequentialGroup()
                        .addComponent(doctorFirstNameLabel)
                        .addGap(100, 100, 100)
                        .addComponent(doctorFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addDoctor)
                    .addGroup(addDoctorPaneLayout.createSequentialGroup()
                        .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RegistraPhNumberlabel1)
                            .addComponent(RegistaLastNameLabel1)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(101, 101, 101)
                        .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(doctorPhNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addComponent(doctorLastNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addComponent(doctorEmailField, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addComponent(doctorSpecialization, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(doctorPasswordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))))
                .addContainerGap(345, Short.MAX_VALUE))
        );
        addDoctorPaneLayout.setVerticalGroup(
            addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDoctorPaneLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorFirstNameLabel)
                    .addComponent(doctorFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistaLastNameLabel1)
                    .addComponent(doctorLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistraPhNumberlabel1)
                    .addComponent(doctorPhNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(doctorEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(29, 29, 29)
                .addGroup(addDoctorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(doctorPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(addDoctor)
                .addContainerGap(210, Short.MAX_VALUE))
        );

        TabPane.addTab("Add Doctor", addDoctorPane);

        RegistaLastNameLabel.setText("Last Name");

        RegistraPhNumberlabel.setText("Phone Number");

        jLabel11.setText("Password");

        addRegistra.setText("Add");
        addRegistra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRegistraActionPerformed(evt);
            }
        });

        RegistraFirstName.setText("First Name");

        javax.swing.GroupLayout addRegistraPaneLayout = new javax.swing.GroupLayout(addRegistraPane);
        addRegistraPane.setLayout(addRegistraPaneLayout);
        addRegistraPaneLayout.setHorizontalGroup(
            addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addRegistraPaneLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addRegistraPaneLayout.createSequentialGroup()
                        .addComponent(RegistraFirstName)
                        .addGap(100, 100, 100)
                        .addComponent(registraFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addRegistra)
                    .addGroup(addRegistraPaneLayout.createSequentialGroup()
                        .addGroup(addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RegistraPhNumberlabel)
                            .addComponent(RegistaLastNameLabel)
                            .addComponent(jLabel11))
                        .addGap(101, 101, 101)
                        .addGroup(addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registraPhNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registraLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registraPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(330, Short.MAX_VALUE))
        );
        addRegistraPaneLayout.setVerticalGroup(
            addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addRegistraPaneLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistraFirstName)
                    .addComponent(registraFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistaLastNameLabel)
                    .addComponent(registraLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistraPhNumberlabel)
                    .addComponent(registraPhNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(addRegistraPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(registraPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(addRegistra)
                .addContainerGap(307, Short.MAX_VALUE))
        );

        TabPane.addTab("Add Registra", addRegistraPane);

        jLabel3.setText("Doctor ID");

        searchDoctor.setText("Search");
        searchDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDoctorActionPerformed(evt);
            }
        });

        Hour2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        Hour2.setToolTipText("Hours");

        Minute2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 15));
        Minute2.setToolTipText("Minutes");

        Hour1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        Hour1.setToolTipText("Hours");

        Details1.setText("SELECT DETAILS TO UPDATE DOCTOR AVAILABILITY");

        Minute1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 15));
        Minute1.setToolTipText("Minutes");

        jLabel9.setText("Date");

        jLabel7.setText("Specialisation");

        jLabel10.setText("Available From: ");

        jLabel15.setText("Available To:");

        jLabel16.setText("Patients to attend: ");

        Details.setText("DETAILS:");

        patientAttend.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));

        jLabel8.setText("Name : ");

        addAvailability.setText("Add Availability");
        addAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAvailabilityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(304, Short.MAX_VALUE)
                .addComponent(addAvailability)
                .addGap(124, 124, 124))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(Details, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Details1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(61, 61, 61)
                            .addComponent(jLabel9)
                            .addGap(22, 22, 22)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel15)
                                .addComponent(jLabel10)
                                .addComponent(jLabel16))
                            .addGap(22, 22, 22)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(Hour1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Hour2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Minute2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Minute1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(patientAttend, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(236, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(368, Short.MAX_VALUE)
                .addComponent(addAvailability)
                .addGap(21, 21, 21))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(Details)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel8)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel7)
                    .addGap(59, 59, 59)
                    .addComponent(Details1)
                    .addGap(32, 32, 32)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(27, 27, 27)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(Hour1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Minute1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(20, 20, 20)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(Hour2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Minute2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(22, 22, 22)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(patientAttend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(57, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout addDoctorAvailabilityLayout = new javax.swing.GroupLayout(addDoctorAvailability);
        addDoctorAvailability.setLayout(addDoctorAvailabilityLayout);
        addDoctorAvailabilityLayout.setHorizontalGroup(
            addDoctorAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDoctorAvailabilityLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(addDoctorAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addDoctorAvailabilityLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(33, 33, 33)
                        .addComponent(doctor2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchDoctor)))
                .addContainerGap(169, Short.MAX_VALUE))
        );
        addDoctorAvailabilityLayout.setVerticalGroup(
            addDoctorAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDoctorAvailabilityLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(addDoctorAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(searchDoctor)
                    .addComponent(doctor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        TabPane.addTab("Add Doctor Availability", addDoctorAvailability);

        jLabel17.setText("Patient ID");

        viewHistory.setText("View History");
        viewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHistoryActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable3);

        printHistory.setText("Print History");
        printHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientHistoryLayout = new javax.swing.GroupLayout(patientHistory);
        patientHistory.setLayout(patientHistoryLayout);
        patientHistoryLayout.setHorizontalGroup(
            patientHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHistoryLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(patientHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(patientHistoryLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(28, 28, 28)
                        .addComponent(patient2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewHistory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(printHistory)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        patientHistoryLayout.setVerticalGroup(
            patientHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHistoryLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(patientHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patient2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(viewHistory)
                    .addComponent(printHistory))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        TabPane.addTab("Patient History", patientHistory);

        userType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doctor", "Patient" }));

        jButton1.setLabel("View Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel18.setText("Select");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Users", "Frequency Count"
            }
        ));
        jScrollPane3.setViewportView(jTable4);

        javax.swing.GroupLayout ReportLayout = new javax.swing.GroupLayout(Report);
        Report.setLayout(ReportLayout);
        ReportLayout.setHorizontalGroup(
            ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ReportLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addComponent(userType, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap(245, Short.MAX_VALUE))
        );
        ReportLayout.setVerticalGroup(
            ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel18))
                .addGap(60, 60, 60)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        TabPane.addTab("Reports", Report);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 28, Short.MAX_VALUE)
                .addComponent(TabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 787, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addComponent(TabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    /**
    FUNCTION TO SET ALL THE VALUES OF COMBO BOXES FROM DATA IN THE DATABASE
    */
    private void initialize() {
        Calendar currentCalendar = Calendar.getInstance();
        DateChooser1.setMinSelectableDate(currentCalendar.getTime());
        jDateChooser1.setMinSelectableDate(currentCalendar.getTime());

        registraID.setText("REGRISTRA ID: " + Integer.toString(UID));
        try {
            String sqlCommand = "select FirstName,LastName from tblRegistras where RegistraID=" + UID;
            ResultSet resultSet = dc.DC.st.executeQuery(sqlCommand);
            if (resultSet.next()) {
                Name.setText("Name: " + resultSet.getString(1) + " " + resultSet.getString(2));
            }

            String sqlCommand2 = "select specialisation from tblspecialists";
            ResultSet resultSet2 = dc.DC.st.executeQuery(sqlCommand2);

            if (resultSet2.next()) {
                do {
                    specialisationComboBox.addItem(resultSet2.getString(1));
                    doctorSpecialization.addItem(resultSet2.getString(1));
                } while (resultSet2.next());
            }

            String sqlCommand3 = "select PatientID from tblpatient";
            ResultSet resultSet3 = dc.DC.st.executeQuery(sqlCommand3);

            if (resultSet3.next()) {
                do {
                    patientId.addItem(resultSet3.getString(1));
                    patient2.addItem(resultSet3.getString(1));
                } while (resultSet3.next());
            }

            String sqlCommand4 = "select DOCID from tbldoctor";
            ResultSet resultSet4 = dc.DC.st.executeQuery(sqlCommand4);

            if (resultSet4.next()) {
                do {
                    doctor1.addItem(resultSet4.getString(1));
                    doctor2.addItem(resultSet4.getString(1));
                } while (resultSet4.next());
            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    
    
    /**
    LOOK FOR AVAILABLE APPOINTMENTS WITH SERACH CONSTRAINT SPECIALIST TO VIST and DATE
    */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String[] columnNames = {"Doctor Name", "Available Date", "Available From", "Available To"};
        String[][] originalData = getData();
        String[][] tableData;
        int limit = Integer.parseInt(originalData[0][0]);

        if (limit > 0) {
            tableData = new String[limit - 1][4];
            for (int i = 0; i < limit - 1; i++) {
                for (int j = 0; j < 4; j++) {
                    tableData[i][j] = originalData[i + 1][j];
                }
            }
        } else {
            tableData = new String[0][0];
        }
        Object[][] data = tableData;
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        jTable2.setModel(model);

        // Add a ListSelectionListener to the table to handle row clicks
        jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                int selectedRow = jTable2.getSelectedRow();
                if (selectedRow >= 0) {
                    scheduleAppointment((String) jTable2.getValueAt(selectedRow, 0),
                            (String) jTable2.getValueAt(selectedRow, 1),
                            (String) jTable2.getValueAt(selectedRow, 2),
                            (String) jTable2.getValueAt(selectedRow, 3));
                }
            }
        });
    }//GEN-LAST:event_searchButtonActionPerformed

    
    
    /**
    FUNCTION TO RETREIVE DATA FROM THE DATABASE
    */
    private String[][] getData() {

        String[][] retreivedData = new String[100][5];
        String formattedDate = "";
        try {
            Date selectedDate = DateChooser1.getDate();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            formattedDate = dateFormat.format(selectedDate);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Pick a date!");
        }

        String specialisation = (String) specialisationComboBox.getSelectedItem();

        try {

            PreparedStatement st = (PreparedStatement) dc.DC.connection.prepareStatement(
                    "Select doc.FirstName,doc.LastName,schedule.availableDate,schedule.availabileStartTime,schedule.availabileEndTime "
                    + "from tblDoctor as doc, tbldoctoravailability as schedule "
                    + "where schedule.availableDate=? and schedule.DOCID in "
                    + "(Select DOCID from tblDoctor where specialisation in (Select specialisationID from tblspecialists where specialisation=?) and doc.DOCID=schedule.DOCID)");
            st.setString(1, formattedDate);
            st.setString(2, specialisation);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                int row = 1;
                do {
                    retreivedData[row][0] = rs.getString(1) + " " + rs.getString(2);
                    retreivedData[row][1] = rs.getString(3);
                    retreivedData[row][2] = rs.getString(4);
                    retreivedData[row][3] = rs.getString(5);
                    retreivedData[row][4] = "Book";
                    row++;
                } while (rs.next());
                retreivedData[0][0] = Integer.toString(row);

            } else {
                JOptionPane.showMessageDialog(null, "No available appoint slots!");
                retreivedData[0][0] = Integer.toString(0);
            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
        return retreivedData;
    }

    
    
    /**
    ADD NEW DOCTOR
    */
    private void addDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorActionPerformed
        // TODO add your handling code here
        String sp = (String) doctorSpecialization.getSelectedItem();
        try {
            String sqlCommand = "select specialisationID from tblspecialists where specialisation='" + sp + "'";
            ResultSet resultSet = dc.DC.st.executeQuery(sqlCommand);
            if (resultSet.next()) {
                sp = (String) (resultSet.getString(1));
            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        if (doctorFirstNameField.getText().equals("") || doctorLastNameField.getText().equals("") || doctorPhNumberField.getText().equals("") || doctorEmailField.getText().equals("") || doctorPasswordField.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "All Details are required!");

        } else {
            try {
                String sqlCommand2 = "insert into tblDoctor(FirstName,LastName,PhNumber,email,specialisation,password) "
                        + "values('" + doctorFirstNameField.getText()
                        + "','" + doctorLastNameField.getText()
                        + "','" + doctorPhNumberField.getText()
                        + "','" + doctorEmailField.getText()
                        + "','" + sp + "','"
                        + doctorPasswordField.getText() + "')";

                int rowsChanged = dc.DC.st.executeUpdate(sqlCommand2);
                if (rowsChanged > 0) {
                    JOptionPane.showMessageDialog(this, "Doctor Added");
                    doctorFirstNameField.setText("");
                    doctorLastNameField.setText("");
                    doctorPhNumberField.setText("");
                    doctorEmailField.setText("");
                    doctorPasswordField.setText("");
                }
                initialize();
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_addDoctorActionPerformed

    
    
    /**
    ADD A NEW REGISTRA
    */
    private void addRegistraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRegistraActionPerformed
        // TODO add your handling code here:
        if (registraFirstNameField.getText().equals("") || registraLastNameField.getText().equals("") || registraPhNumberField.getText().equals("") || registraPasswordField.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "All Details are required!");
        } else {
            try {
                String sqlCommand = "insert into tblRegistras(FirstName,LastName,PhNumber,password) "
                        + "values('" + registraFirstNameField.getText()
                        + "','" + registraLastNameField.getText()
                        + "','" + registraPhNumberField.getText()
                        + "','" + registraPasswordField.getText() + "')";

                int rowsChanged = dc.DC.st.executeUpdate(sqlCommand);
                if (rowsChanged > 0) {
                    JOptionPane.showMessageDialog(this, "Registra Added");
                    registraFirstNameField.setText("");
                    registraLastNameField.setText("");
                    registraPhNumberField.setText("");
                    registraPasswordField.setText("");
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_addRegistraActionPerformed

    
    
    /**
    MAKE TABLES CLICKABLE TO SCHEDULE BOOKINGS ON SELECTING A ROW
    */
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable2.getSelectedRow();
        if (selectedRow == 1) {
            String name = jTable2.getValueAt(selectedRow, 0).toString();
            String availableDate = jTable2.getValueAt(selectedRow, 1).toString();
            String startTime = jTable2.getValueAt(selectedRow, 2).toString();
            String endTime = jTable2.getValueAt(selectedRow, 3).toString();

            scheduleAppointment(name, availableDate, startTime, endTime);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    
    
    /**
    FUNCTION TO VIEW ALL SCHEDULED BOOKINGS
    */
    private void ViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewButtonActionPerformed
        // TODO add your handling code here:
        String formattedDate = "";
        try {
            Date selectedDate = DateChooser2.getDate();
            // Format the selected date to "yyyy-MM-dd" format
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            formattedDate = dateFormat.format(selectedDate);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Enter search options");
        }

        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        String[][] retreivedData = new String[100][6];

        try {
            String sqlCommand = "";
            String selectedDoctor = (String) doctor1.getSelectedItem();
            String selectedPatient = (String) patientId.getSelectedItem();

            if ((formattedDate.equalsIgnoreCase(""))) {

            } else if ((!selectedDoctor.equalsIgnoreCase("")) && (!selectedPatient.equalsIgnoreCase("")) && (!formattedDate.equalsIgnoreCase(""))) {
                sqlCommand = "Select patient.FirstName,patient.LastName,doctor.FirstName,doctor.LastName,sp.Specialisation,sc.ScheduledDate,sc.ScheduledTime from tblpatient as patient,tblDoctor as doctor,tblspecialists as sp, tblscheduledBooking as sc where patient.PatientID="
                        + selectedPatient + " and patient.PatientID=sc.PatientID and sc.ScheduledDate='" + formattedDate + "' and doctor.DOCID=" + selectedDoctor + " and doctor.DOCID=sc.DOCID and "
                        + "sp.Specialisation=(select Specialisation from tblspecialists where specialisationID=doctor.Specialisation)";
                ResultSet rs = dc.DC.st.executeQuery(sqlCommand);
                if (rs.next()) {
                    int row = 0;
                    do {
                        retreivedData[row][0] = rs.getString(6);
                        retreivedData[row][1] = rs.getString(7);
                        retreivedData[row][2] = rs.getString(1) + " " + rs.getString(2);
                        retreivedData[row][3] = rs.getString(3) + " " + rs.getString(4);
                        retreivedData[row][4] = rs.getString(5);
                        retreivedData[row][5] = "Cancel";
                        row++;
                    } while (rs.next());

                    String[] columnNames = {"Appointment Date", "Time", "Patient Name", "Doctor Name", "Specialisation"};
                    Object[][] data = retreivedData;
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);
                    jTable1.setModel(model);
                }

            } else {
                JOptionPane.showMessageDialog(null, "No available appoint slots!");
            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
    }//GEN-LAST:event_ViewButtonActionPerformed

    
    /**
    FUNCTION TO LOOKUP DOCTOR BASED ON DOCTOR ID AND RETREIVE THEIR DETAILS
    */
    private void searchDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDoctorActionPerformed
        // TODO add your handling code here:
        try {
            PreparedStatement st1 = (PreparedStatement) dc.DC.connection.prepareStatement(
                    "select doc.FirstName,doc.LastName,sc.specialisation from tblDoctor as doc,tblspecialists as sc where doc.DOCID=? and doc.Specialisation=sc.specialisationID;");
            st1.setString(1, (String) doctor2.getSelectedItem());

            ResultSet rs = st1.executeQuery();
            if (rs.next()) {
                jLabel8.setText("Name : " + rs.getString(1) + " " + rs.getString(2));
                jLabel7.setText("Specialisation : " + rs.getString(3));
            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    
    
    /**
    FUNCTION TO POST AVAILABLE APPOINTMENT SLOTS FOR A DOCTOR AS A REGISTRA
    */
    private void addAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAvailabilityActionPerformed
        // TODO add your handling code here:
        Date selectedDate = jDateChooser1.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = dateFormat.format(selectedDate);

        int pa = (Integer) patientAttend.getValue();

        String startTime = getTime((int) Hour1.getValue(), (int) Minute1.getValue());
        String stopTime = getTime((int) Hour2.getValue(), (int) Minute2.getValue());

        try {
            PreparedStatement st1 = (PreparedStatement) dc.DC.connection.prepareStatement("insert into tbldoctoravailability(availableDate,DOCID,availabileStartTime,availabileEndTime,PatientToAttend) values(?,?,?,?,?)");
            st1.setString(1, formattedDate);
            st1.setString(2, (String) doctor2.getSelectedItem());
            st1.setString(3, startTime);
            st1.setString(4, stopTime);
            st1.setString(5, String.valueOf(pa));

            int rowsAffected = st1.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Available appointment slots added for  " + formattedDate);
                Hour1.setValue(0);
                Hour2.setValue(0);
                Minute1.setValue(0);
                Minute2.setValue(0);
                patientAttend.setValue(1);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Enter data in all required fields");
        }
    }//GEN-LAST:event_addAvailabilityActionPerformed

    
    
    /**
    FUNCTION TO VIEW PATIENT'S MEDICAL HISTORY AS A REGISTRA
    */
    private void viewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHistoryActionPerformed
        // TODO add your handling code here:
        String selectedPatient = (String) patient2.getSelectedItem();
        String[][] retreivedData = new String[100][6];

        if (selectedPatient.equals("")) {
        } else {
            try {

                PreparedStatement st1 = (PreparedStatement) dc.DC.connection.prepareStatement(" select doc.FirstName,doc.LastName, sc.ScheduledDate,sp.specialisation,sc.Symptoms from tblDoctor as doc,tblScheduledBooking as sc, tblspecialists as sp where doc.DOCID=sc.DOCID and sc.PatientID=? and sp.specialisation=(Select specialisation from tblspecialists where specialisationID=doc.specialisation)");
                st1.setString(1, selectedPatient);

                ResultSet result = st1.executeQuery();

                if (result.next()) {
                    int row = 0;
                    do {
                        retreivedData[row][0] = result.getString(1) + " " + result.getString(2);
                        retreivedData[row][1] = result.getString(3);
                        retreivedData[row][2] = result.getString(4);
                        retreivedData[row][3] = result.getString(5);
                        row++;
                    } while (result.next());

                    String[] columnNames = {"Appointment Date", "Diagnosising Doctor", "Specialisation", "Symptoms"};
                    Object[][] data = retreivedData;
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);
                    jTable3.setModel(model);
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_viewHistoryActionPerformed

    
    
    /**
    FUNCTION TO PRINT PATIENT'S MEDICAL HISTORY DATA INTO A FILE AS A REGISTRA
    */
    private void printHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printHistoryActionPerformed
        // TODO add your handling code here:
        try {
            File file = new File(UID + "_Medical_History.txt");
            FileWriter writer = new FileWriter(file);

            writer.write("Patient Name: " + "\t");
            // Retrieve the table data
            int rowCount = jTable3.getRowCount();
            int columnCount = jTable3.getColumnCount();

            for (int row = 0; row < rowCount; row++) {
                for (int col = 0; col < columnCount; col++) {

                    Object value = jTable3.getValueAt(row, col);
                    if (col == 0 && (jTable3.getValueAt(row, col) == null)) {
                        break;
                    } else {
                        writer.write(value + "\t");
                    }
                }
                writer.write("\n");
            }
            writer.close();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_printHistoryActionPerformed

    
    
    /**
    FUNCTION TO VIEW REPORT OF DOCTOR/PATIENT AS PER REGISTRA'S CHOICE
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String[][] retreivedData = new String[100][2];
        String ut = (String) userType.getSelectedItem();
        String sqlCommand = "";
        try {
            if (ut.equalsIgnoreCase("doctor")) {
                sqlCommand = "select doc.FirstName,doc.LastName, count(sc.DOCID) from tblScheduledBooking as sc, tblDoctor as doc where doc.DOCID=sc.DOCID group by sc.DOCID order by count(sc.DOCID) desc";

            } else if (ut.equalsIgnoreCase("patient")) {
                sqlCommand = "select patient.FirstName,patient.LastName, count(sc.PatientID) from tblScheduledBooking as sc, tblPatient as patient where patient.PatientID=sc.PatientID group by sc.PatientID order by count(sc.PatientID) desc";
            }
            PreparedStatement st1 = (PreparedStatement) dc.DC.connection.prepareStatement(sqlCommand);
            ResultSet result = st1.executeQuery();

            if (result.next()) {
                int row = 0;
                do {
                    retreivedData[row][0] = result.getString(1) + " " + result.getString(2);
                    retreivedData[row][1] = result.getString(3);
                    row++;
                } while (result.next());

                String[] columnNames = {ut, "Frequency"};
                Object[][] data = retreivedData;
                DefaultTableModel model = new DefaultTableModel(data, columnNames);
                jTable4.setModel(model);

            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    /**
    LOGOUT from registra portal
    */
    private void logOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null,"Are you sure, you wish to log out?","Confirm log out", JOptionPane.YES_NO_OPTION);
        if(result==JOptionPane.YES_OPTION){
            this.dispose();
            new Login().setVisible(true);
        }
    }//GEN-LAST:event_logOutActionPerformed

    
    
    /** 
    Recieve number from number picker and convert the values to it's corresponding  date in 24 hour clock
    */
    private String getTime(int hour, int minutes) {

        String time = "";

        if (Integer.toString(hour).length() == 1) {
            time = "0" + Integer.toString(hour) + ":";
        } else {
            time = Integer.toString(hour) + ":";
        }

        if (Integer.toString(minutes).length() == 1) {
            time += "0" + Integer.toString(minutes) + ":00";
        } else {
            time += Integer.toString(minutes) + ":00";
        }
        System.out.println(time);
        return time;
    }

    
    
    /** 
    ACTION TO PERFORM ON SCHEDULING AN APPOINTMENT FOR A PATIENT
    */
    private void scheduleAppointment(String name, String availableDate, String startTime, String endTime) {
        JFrame scheduleAppointmentFrame = new JFrame();
        scheduleAppointmentFrame.setTitle("Schedule appointment");
        scheduleAppointmentFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        scheduleAppointmentFrame.setLocation(900, 300);
        scheduleAppointmentFrame.setSize(350, 350);
        scheduleAppointmentFrame.setLayout(null);

        // Create an input field to read which patient to book appointments for
        JLabel patientLabel = new JLabel("<html>Booking For<br>Patient ID:&nbsp;</html>");
        patientLabel.setBounds(30, 40, 100, 50);

        JTextField patientTextField = new JTextField();
        patientTextField.setBounds(30, 90, 200, 20);

        JLabel details = new JLabel("<html>Doctor:&nbsp;&nbsp;" + name + "<br>Appointment Date: &nbsp;&nbsp;" + availableDate
                + "<br>Time:&nbsp;&nbsp;" + startTime + "</html>");
        details.setBounds(30, 120, 200, 100);

        JButton confirm = new JButton("Confirm");
        confirm.setBounds(200, 200, 100, 20);

        scheduleAppointmentFrame.add(patientLabel);
        scheduleAppointmentFrame.add(patientTextField);
        scheduleAppointmentFrame.add(details);
        scheduleAppointmentFrame.add(confirm);

        scheduleAppointmentFrame.setVisible(true);

        confirm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String patientID = patientTextField.getText();
                if (patientID.equals("")) {
                    JOptionPane.showMessageDialog(null, "Enter Patient ID");
                    patientTextField.requestFocus();
                } else {
                    int result = JOptionPane.showConfirmDialog(scheduleAppointmentFrame,
                            "<html><strong>Appointment Details</strong><br><br>Patient ID: " + patientID + "<br>"
                            + details.getText(),
                            "Confirm booking", JOptionPane.YES_NO_OPTION);
                    if (result == JOptionPane.YES_OPTION) {
                        scheduleAppointmentFrame.dispose();
                        try {

                            PreparedStatement st1 = (PreparedStatement) dc.DC.connection.prepareStatement(
                                    "select doc.DOCID,sc.PatientToAttend from tblDoctor as doc,tbldoctorAvailability as sc "
                                    + "where doc.FirstName=? and doc.LastName=? and doc.Specialisation=(Select specialisationID from tblSpecialists where specialisation=?)"
                                    + " and doc.DOCID=sc.DOCID and sc.availableDate=? and sc.PatientToAttend>0");
                            String[] arr = name.split(" ");

                            for (int i = 0; i < arr.length; i++) {
                                System.out.println(arr[i]);
                            }

                            st1.setString(1, arr[0]);
                            st1.setString(2, arr[1]);
                            st1.setString(3, (String) specialisationComboBox.getSelectedItem());
                            st1.setString(4, availableDate);
                            String DOCID = "";
                            int PatientToAttend = 0;
                            ResultSet rs = st1.executeQuery();
                            if (rs.next()) {
                                DOCID = rs.getString(1);
                                PatientToAttend = Integer.parseInt(rs.getString(2));
                            }
                            System.out.println("DOCID: " + DOCID);
                            PreparedStatement st = (PreparedStatement) dc.DC.connection.prepareStatement(
                                    "insert into tblscheduledbooking(PatientID,DOCID,ScheduledDate,ScheduledTime,Registra) values(?,?,?,?,?)");
                            st.setString(1, patientID);
                            st.setString(2, DOCID);
                            st.setString(3, availableDate);
                            st.setString(4, startTime);
                            st.setString(5, Integer.toString(UID));
                            int rowsAffected = st.executeUpdate();
                            System.out.println(rowsAffected);
                            if (rowsAffected > 0) {
                                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
                                LocalTime stime = LocalTime.parse(startTime, formatter);
                                LocalTime etime = LocalTime.parse(endTime, formatter);

                                Duration duration = Duration.between(stime, etime);
                                long hours = duration.toHours(); // Get the difference in hours
                                long minutes = duration.toMinutes() % 60; // Get the difference in minutes

                                if (hours < 0) {
                                    hours *= -1;
                                }
                                if (minutes < 0) {
                                    minutes *= -1;
                                }

                                String formattedTime = "";

                                if (PatientToAttend > 2) {
                                    long timePerPatient = ((hours * 60) + minutes) / PatientToAttend;
                                    stime = stime.plusMinutes(timePerPatient);
                                    formattedTime = stime.format(formatter);
                                } else if (PatientToAttend == 1) {
                                    long timePerPatient = ((hours * 60) + minutes);
                                    stime = stime.plusMinutes(timePerPatient);
                                    formattedTime = stime.format(formatter);
                                }

                                System.out.println(formattedTime);

                                PatientToAttend -= 1;
                                PreparedStatement st3 = (PreparedStatement) dc.DC.connection.prepareStatement(
                                        "update tbldoctoravailability set availabileStartTime=?, PatientToAttend=? where DOCID=? and availableDate=?");
                                st3.setString(1, (String) formattedTime);
                                st3.setString(2, Integer.toString(PatientToAttend));
                                st3.setString(3, DOCID);
                                st3.setString(4, (String) availableDate);
                                rowsAffected = st3.executeUpdate();

                                System.out.println("00 " + rowsAffected);

                                if (rowsAffected > 0) {
                                    JOptionPane.showMessageDialog(scheduleAppointmentFrame, "Booking Confirmed");
                                }

                            }

                        } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                        }
                    }
                }
            }
        });

    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistraHome.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistraHome.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistraHome.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistraHome.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistraHome("1").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateChooser1;
    private com.toedter.calendar.JDateChooser DateChooser2;
    private javax.swing.JLabel Details;
    private javax.swing.JLabel Details1;
    private javax.swing.JSpinner Hour1;
    private javax.swing.JSpinner Hour2;
    private javax.swing.JSpinner Minute1;
    private javax.swing.JSpinner Minute2;
    private javax.swing.JLabel Name;
    private javax.swing.JLabel RegistaLastNameLabel;
    private javax.swing.JLabel RegistaLastNameLabel1;
    private javax.swing.JLabel RegistraFirstName;
    private javax.swing.JLabel RegistraPhNumberlabel;
    private javax.swing.JLabel RegistraPhNumberlabel1;
    private javax.swing.JPanel Report;
    private javax.swing.JTabbedPane TabPane;
    private javax.swing.JButton ViewButton;
    private javax.swing.JButton addAvailability;
    private javax.swing.JButton addDoctor;
    private javax.swing.JPanel addDoctorAvailability;
    private javax.swing.JPanel addDoctorPane;
    private javax.swing.JButton addRegistra;
    private javax.swing.JPanel addRegistraPane;
    private javax.swing.JScrollPane bookingTable;
    private javax.swing.JComboBox<String> doctor1;
    private javax.swing.JComboBox<String> doctor2;
    private javax.swing.JTextField doctorEmailField;
    private javax.swing.JTextField doctorFirstNameField;
    private javax.swing.JLabel doctorFirstNameLabel;
    private javax.swing.JTextField doctorLastNameField;
    private javax.swing.JTextField doctorPasswordField;
    private javax.swing.JTextField doctorPhNumberField;
    private javax.swing.JComboBox<String> doctorSpecialization;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JButton logOut;
    private javax.swing.JComboBox<String> patient2;
    private javax.swing.JSpinner patientAttend;
    private javax.swing.JPanel patientHistory;
    private javax.swing.JComboBox<String> patientId;
    private javax.swing.JButton printHistory;
    private javax.swing.JTextField registraFirstNameField;
    private javax.swing.JLabel registraID;
    private javax.swing.JTextField registraLastNameField;
    private javax.swing.JTextField registraPasswordField;
    private javax.swing.JTextField registraPhNumberField;
    private javax.swing.JPanel scheduleBookingPane;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchDoctor;
    private javax.swing.JComboBox<String> specialisationComboBox;
    private javax.swing.JComboBox<String> userType;
    private javax.swing.JPanel viewBookingPane;
    private javax.swing.JButton viewHistory;
    // End of variables declaration//GEN-END:variables
}
